import {JsonRpcProvider, RawSigner} from "@mysten/sui.js";
import {createPublishTx, PublishOptions, publishPackage} from "./publish-package";
import {upgradePackage, UpgradeOptions, createUpgradePackageTx} from "./upgrade-package"
import { buildPackage, BuildOptions } from "./build-package"

type UpgradeParams = {
  packagePath: string,
  oldPackageId: string,
  upgradeCapId: string,
  signer: RawSigner,
  options?: UpgradeOptions
}

export class SuiPackagePublisher {
  public suiBin: string;
  constructor(suiBin?: string) {
    this.suiBin = suiBin || 'sui';
  }

  /**
   * publish the move package at the given path
   * It starts a child process to call the "sui binary" to build the move package
   * The building process takes place in a tmp directory, which would be cleaned later
   * @param packagePath the path to the package to be published
   * @param signer the signer who is going to upgrade the package
   *
   * @returns PublishPackageResult
   *  PublishPackageResult.packageId: the package id of the published package
   *  PublishPackageResult.upgradeCapId: the upgrade capability id of the published package
   *  PublishPackageResult.publishTxn: the publish transaction block response, type `SuiTransactionBlockResponse`
   *  PublishPackageResult.created: the created objects in the publish transaction,  type `{ type: string; objectId: string, owner: string }[]`
   */
  async publishPackage(packagePath: string, signer: RawSigner, options?: PublishOptions) {
    return publishPackage(this.suiBin, packagePath, signer, options);
  }

  /**
   * Create a publish package transaction for signing and sending
   * @param packagePath, the path to the package to be built
   * @param provider, the provider to build the transaction
   * @param publisher, the publisher who is going to publish the package
   * @param options, the options for building the transaction
   * @returns the base64 encoded transaction bytes, and the transaction block
   */
  async createPulishPackageTx(packagePath: string, provider: JsonRpcProvider, publisher: string, options?: PublishOptions) {
    return createPublishTx(this.suiBin, packagePath, provider, publisher, options);
  }

  /**
   * Upgrade a package to the SUI blockchain using the sui client binary
   * @param params `UpgradeParams`
   *  params.packagePath: `string` the path to the package to be built
   *  params.oldPackageId: `string` the old package id
   *  params.upgradeCapId: `string` the upgrade capability id
   *  params.signer: `RawSigner` the signer who is going to upgrade the package, it's the signer generated by the @mysten/sui.js SDK
   *  params.options: the options for upgrading the package
   *   default options: { skipFetchLatestGitDeps: false, withUnpublishedDependencies: true, gasBudget: 10**9 }
   *
   *  @returns UpgradePackageResult
   *   UpgradePackageResult.packageId: the package id of the upgraded package
   *   UpgradePackageResult.upgradeCapId: the upgrade capability id of the upgraded package
   *   UpgradePackageResult.upgradeTxn: the upgrade transaction block response, type `SuiTransactionBlockResponse`
   */
  async upgradePackage(params: UpgradeParams) {
    const { packagePath, oldPackageId, upgradeCapId, signer, options } = params;
    return upgradePackage(
      this.suiBin,
      packagePath,
      oldPackageId,
      upgradeCapId,
      signer,
      options
    );
  }

  async createUpgradePackageTx(
    packagePath: string,
    oldPackageId: string,
    upgradeCapId: string,
    provider: JsonRpcProvider,
    publisher: string,
    options?: UpgradeOptions
  ) {
    return createUpgradePackageTx(
      this.suiBin,
      packagePath,
      oldPackageId,
      upgradeCapId,
      provider,
      publisher,
      options
    );
  }

  /**
   * Build the package at the given path
   * @param packagePath the path to the package to be built
   * @param options the options for building the package
   *  options.skipFetchLatestGitDeps: skip fetching the latest git dependencies, default to false
   *  options.withUnpublishedDependencies: also publish transitive dependencies that are not published yet, default to true
   * @returns BuildPackageResult
   *  BuildPackageResult.modules: the modules in the package
   *  BuildPackageResult.dependencies: the dependencies of the package
   *  BuildPackageResult.digest: the digest of the package
   */
  buildPackage(packagePath: string, options?: BuildOptions) {
    return buildPackage(this.suiBin, packagePath, options);
  }
}
